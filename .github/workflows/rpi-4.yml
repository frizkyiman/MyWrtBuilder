# This is a basic workflow to help you get started with Actions

name: Generate RPi-4 OpenWrt Firmware

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      source_base:
        description: "Select the Source Base"
        required: true
        default: "openwrt"
        type: choice
        options:
          - openwrt
          - immortalwrt
      source_branch:
        description: "Select Branch Revision"
        required: true
        default: "21.02.7"
        type: choice
        options:
          - snapshots
          - 21.02.3
          - 21.02.7
          - 22.03.5
          - 23.05.0
          - 23.05.0-rc4
      rootfs:
        description: 'Set Rootfs size'
        required: true
        default: '3700'
      squashfs:
        description: "Generate Squashfs image"
        required: true
        default: "false"
        type: choice
        options:
          - true
          - false
      release:
        description: "Upload Image to Release"
        required: true
        default: "true"
        type: choice
        options:
          - true
          - false

env:
  DOWNLOAD_BASE: https://downloads.${{ inputs.source_base }}.org
  BASE: ${{ inputs.source_base }}
  BRANCH: ${{ inputs.source_branch }}
  BUILD_SH: build-${{ inputs.source_base }}.sh
  PATCH_SH: scripts/builder-patch-${{ inputs.source_base }}.sh
  ROOTFS_SIZE: ${{ inputs.rootfs}}
  ROOTFS_SQUASHFS: ${{ inputs.squashfs }}
  UPLOAD_ARTIFACTS: false
  TZ: Asia/Jakarta

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  Generate:
    # The type of runner that the job will run on
    runs-on: ubuntu-22.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Initialization Environment
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install build-essential libncurses5-dev libncursesw5-dev zlib1g-dev gawk git gettext libssl-dev xsltproc rsync wget unzip tar gzip qemu-utils mkisofs
          sudo timedatectl set-timezone "$TZ"

      - name: Setup Environment Variables
        run: |
          echo "DATE=$(date +%Y.%m.%d)" >> $GITHUB_ENV
          echo "DATETIME=$(date +'%Y.%m.%d-%H:%M:%S')" >> $GITHUB_ENV
      
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v3
        with: 
          path: origin

      - name: Download Image Builder ${{ env.BASE }}-${{ env.BRANCH }}
        id: download
        run: |
          if [ "$BRANCH" == "snapshots" ]; then
              wget -q $DOWNLOAD_BASE/$BRANCH/targets/bcm27xx/bcm2711/$BASE-imagebuilder-bcm27xx-bcm2711.Linux-x86_64.tar.xz
              tar -xJf *-imagebuilder-* && sync && rm -f *-imagebuilder-*.tar.xz
              cp -r $GITHUB_WORKSPACE/origin/* $GITHUB_WORKSPACE/$BASE-imagebuilder-bcm27xx-bcm2711.Linux-x86_64/
              echo "status=success" >> $GITHUB_OUTPUT
          else
              wget -q $DOWNLOAD_BASE/releases/$BRANCH/targets/bcm27xx/bcm2711/$BASE-imagebuilder-$BRANCH-bcm27xx-bcm2711.Linux-x86_64.tar.xz
              tar -xJf *-imagebuilder-* && sync && rm -f *-imagebuilder-*.tar.xz
              cp -r $GITHUB_WORKSPACE/origin/* $GITHUB_WORKSPACE/$BASE-imagebuilder-$BRANCH-bcm27xx-bcm2711.Linux-x86_64/
              echo "status=success" >> $GITHUB_OUTPUT
          fi
      
      - name: Download External Packages
        working-directory: ${{ env.BASE }}-imagebuilder-${{ env.BRANCH }}-bcm27xx-bcm2711.Linux-x86_64
        run: |
          cat external-package-urls.txt | xargs wget -qP packages
         
      - name: Run Patch and DIY Scripts
        working-directory: ${{ env.BASE }}-imagebuilder-${{ env.BRANCH }}-bcm27xx-bcm2711.Linux-x86_64
        run: |
          bash $PATCH_SH
          bash scripts/clash-core.sh
          echo -e "Server space usage before starting to compile: \n$(df -hT ${PWD}) \n"

      - name: Compile Firmware ${{ env.BASE }}-${{ env.BRANCH }}
        id: compile
        working-directory: ${{ env.BASE }}-imagebuilder-${{ env.BRANCH }}-bcm27xx-bcm2711.Linux-x86_64
        if: steps.download.outputs.status == 'success' && !cancelled()
        run: |
          bash $BUILD_SH
          echo "status=success" >> $GITHUB_OUTPUT
          echo -e "Server space usage after compilation: \n$(df -hT ${PWD}) \n"

      - name: Clear server space
        working-directory: ${{ env.BASE }}-imagebuilder-${{ env.BRANCH }}-bcm27xx-bcm2711.Linux-x86_64
        if: ${{ steps.compile.outputs.status }} == 'success' && !cancelled()
        run: |
          rm -rf $(ls . | grep -v "^bin$" | xargs) 2>/dev/null
          df -hT ${PWD}

      - name: Organize Files
        id: organize
        if: steps.compile.outputs.status == 'success' && !cancelled()
        working-directory: ${{ env.BASE }}-imagebuilder-${{ env.BRANCH }}-bcm27xx-bcm2711.Linux-x86_64/bin/targets/bcm27xx/bcm2711/
        run: |
          for file in *-bcm27xx-bcm2711-rpi-4-*.gz; do
            mv "$file" "fri_$file"
          done
          rm -rf *.json
          rm -rf *.manifest
          echo "status=success" >> $GITHUB_OUTPUT
          
      - name: Upload Firmware to Artifacts
        uses: actions/upload-artifact@v2
        if: env.UPLOAD_ARTIFACTS == 'true' && !cancelled()
        with:
          name: ${{ env.BASE }}-${{ env.BRANCH }}-bcm27xx_bcm2711-images-${{ env.DATETIME }}
          path: ${{ env.BASE }}-imagebuilder-${{ env.BRANCH }}-bcm27xx-bcm2711.Linux-x86_64/bin/targets/bcm27xx/bcm2711//*

      - name: Upload Firmware to Release
        uses: svenstaro/upload-release-action@v2
        if: github.event.inputs.release == 'true'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file_glob: true
          file: ${{ env.BASE }}-imagebuilder-${{ env.BRANCH }}-bcm27xx-bcm2711.Linux-x86_64/bin/targets/bcm27xx/bcm2711//*
          asset_name: ${{ github.event.repository.name }}-${{ github.sha }}
          tag: rpi-4-${{ env.BASE }}-${{ env.BRANCH }}-${{ env.DATE }}
          overwrite: true
          body: |
            ### friWrt ${{ env.BASE }}-${{ env.BRANCH }} Image information
            - Default IP: 192.168.1.1
            - Default username: root
            - Default password: none
            - Default WIFI name: friWrt_5g
            - Default WIFI password: none
  
